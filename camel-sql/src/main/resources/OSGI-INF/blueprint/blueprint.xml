<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">


	<bean id="orderBean" class="com.redhat.camel.blueprint.sql.OrderBean" />


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
		<property name="url" value="jdbc:derby:memory:orders;create=true" />
		<property name="username" value="" />
		<property name="password" value="" />
	</bean>
	
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
  <property name="userName" value="admin"/>
  <property name="password" value="admin"/>
    <property name="brokerURL" value="failover:tcp://localhost:61616"/>
  </bean>


	<!-- bean which creates/destroys the database table for this example -->
	<bean id="initDatabase" class="com.redhat.camel.blueprint.sql.DatabaseBean"
		init-method="create" destroy-method="destroy">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- configure the Camel SQL component to use the JDBC data source -->
	<bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<camelContext xmlns="http://camel.apache.org/schema/blueprint">
		<propertyPlaceholder location="classpath:sql.properties"
			id="placeholder" />
		<route id="generateOrder-route">
			<from uri="timer:foo?repeatCount=10" />
			<transform id="transform1">
				<method ref="orderBean" method="generateOrder"></method>
			</transform>
			<to uri="sql:{{sql.insertOrder}}" id="to1" />
			<log message="Inserted new order ${body[id]}" id="log1" />
		</route>
		<route id="processOrder-route">
			<from uri="sql:{{sql.selectOrder}}?onConsume={{sql.markOrder}}" />
			<to uri="bean:orderBean?method=processOrder" />
			<log message="${body}" />
		</route>
		<route id="processedOrder-route">
			<from uri="sql:{{sql.selectProcessedOrder}}" />
			 <to uri="bean:orderBean?method=printOrders" />
			 <to uri="activemq:test_queue"/>
			<log message="${body}" />
		</route>
	</camelContext>

</blueprint>
